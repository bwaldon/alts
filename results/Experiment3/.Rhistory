install.packages("tidyverse")
names(knitr::knit_engines$get())
install.pandoc()
install.packages("installr")
install.packages("brms")
kill_webppl()
library(webppl)
library(rwebppl)
kill_webppl()
library(tidyverse)
library(ordinal)
library(bootstrap)
library(rwebppl)
library(jsonlite)
library(lme4)
library(lsmeans)
setwd("~/Documents/GitHub/alts/results/Experiment3")
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
d <- read.csv("results.csv")
levels(d$language) # KEEP DATA IF LANGUAGE = SOME SPELLING VARIATION OF 'ENGLISH' (OR NA)
d <- d %>%
filter(!(language == "Russian"))
to_exclude <- d %>%
group_by(workerid, type, selection) %>%
filter((type == "left" && selection == "right") || (type == "right" && selection  == "left")) %>%
group_by(workerid) %>%
summarize(n_mistakes = n()) %>%
filter(n_mistakes > 0)
d <- d %>%
filter(!(workerid %in% to_exclude$workerid))
sel_counts <- d %>%
# ONLY INTERESTED IN "LOOKS LIKE" TRIALS...
filter(type == "looks like") %>%
# ... THAT THE CONDITIONS SHARE IN COMMON
filter(id %in% (d %>% filter(type == "looks like" & condition == "symmetric"))$id) %>%
group_by(workerid,condition) %>%
summarize(n = n(), ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
pcompetitor = ncompetitor / (ncompetitor + ntarget))
sel_counts_learning <- d %>%
# ONLY INTERESTED IN "LOOKS LIKE" TRIALS...
filter(type == "looks like") %>%
# ... THAT THE CONDITIONS SHARE IN COMMON
filter(id %in% (d %>% filter(type == "looks like" & condition == "symmetric"))$id) %>%
mutate(half = ifelse(order < 13, 1, 2)) %>%
group_by(workerid,condition,half) %>%
summarize(n = n(), ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
pcompetitor = ncompetitor / (ncompetitor + ntarget))
d$selection <- relevel(d$selection, ref = "target")
d$condition <- relevel(d$condition, ref = "control")
d_filtered <- d %>%
# ONLY INTERESTED IN "LOOKS LIKE" TRIALS...
filter(type == "looks like") %>%
# ... THAT THE CONDITIONS SHARE IN COMMON
filter(id %in% (d %>% filter(type == "looks like" & condition == "symmetric"))$id)
m <- glmer(selection ~ condition + (1|workerid) + (1 + condition|id), family = "binomial", data = d_filtered)
d_noprompt <- read.csv("results_noprompt.csv")
levels(d_noprompt$language) # KEEP DATA IF LANGUAGE = SOME SPELLING VARIATION OF 'ENGLISH' (OR NA)
noprompt_to_exclude <- d %>%
group_by(workerid, type, selection) %>%
filter((type == "left" && selection == "right") || (type == "right" && selection  == "left")) %>%
group_by(workerid) %>%
summarize(n_mistakes = n()) %>%
filter(n_mistakes > 0)
d_noprompt <- d_noprompt %>%
filter(!(workerid %in% noprompt_to_exclude$workerid))
d_noprompt <- d_noprompt %>%
filter(kind == "critical") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
competitor_prior = ncompetitor / (ncompetitor + ntarget))
d_naming <- read.csv("results_naming.csv")
d_naming <- d_naming %>%
group_by(id) %>%
summarize(nknowtarget = sum(type == "target" & know == "True"),
nknowcompetitor = sum(type == "competitor" & know == "True"),
target_nameability = nknowtarget / sum(type == "target"),
competitor_nameability = nknowcompetitor / sum(type == "competitor"))
bda <- read_file("bda_inferglobalparams.txt")
d_total <- d %>%
filter(kind == "critical" & type == "looks like") %>%
group_by(id,condition) %>%summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
d_total <- merge(d_total, d_naming, by = "id")
d_total <- merge(d_total, d_noprompt, by = "id")
d_total <- d_total %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
d_total_JSON <- toJSON(d_total)
full_bda <- webppl(paste("var itemData = ", d_total_JSON, "\n", bda))
bda <- read_file("bda_inferglobalparams.txt")
d_total <- d %>%
filter(kind == "critical" & type == "looks like") %>%
group_by(id,condition) %>%summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
d_total <- merge(d_total, d_naming, by = "id")
d_total <- merge(d_total, d_noprompt, by = "id")
View(d_total)
d_total <- merge(d_total, d_naming, by = "id")
d_total <- merge(d_total, d_noprompt, by = "id")
d_total <- d_total %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
d_total <- d %>%
filter(kind == "critical" & type == "looks like") %>%
group_by(id,condition) %>%summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
d_total <- d %>%
filter(kind == "critical" & type == "looks like") %>%
group_by(id,condition) %>%summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
d_total <- merge(d_total, d_naming, by = "id")
d_total <- merge(d_total, d_noprompt, by = "id")
d_total <- d_total %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
d_total_JSON <- toJSON(d_total)
full_bda <- webppl(paste("var itemData = ", d_total_JSON, "\n", bda))
full_posteriors <- (full_bda$posteriors)$support
full_maxap <- (full_bda$maxap)
write.csv(full_posteriors, file = "posteriors/posteriors_fulldata.csv")
bda_bycondition <- read_file("bda_bycondition.txt")
data_byitem <- function(cond, data) {
output <- data %>%
filter(condition == cond & kind == "critical" & type == "looks like") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
output <- merge(output, d_naming, by = "id")
output <- merge(output, d_noprompt, by = "id")
output <- output %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
}
symmetric_byitem <-data_byitem("symmetric",d)
control_byitem <-data_byitem("control",d)
target_byitem <-data_byitem("target",d)
nottarget_byitem <-data_byitem("nottarget",d)
control_byitem_json <- toJSON(control_byitem)
control_bda <- webppl(paste("var itemData = ", control_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_control <- (control_bda$posteriors)$support
write.csv(posteriors_control, file = "posteriors/posteriors_control.csv")
target_byitem_json <- toJSON(target_byitem)
target_bda <- webppl(paste("var itemData = ", target_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_target <- (target_bda$posteriors)$support
write.csv(posteriors_target, file = "posteriors/posteriors_target.csv")
nottarget_byitem_json <- toJSON(nottarget_byitem)
nottarget_bda <- webppl(paste("var itemData = ", nottarget_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_nottarget <- (nottarget_bda$posteriors)$support
write.csv(posteriors_nottarget, file = "posteriors/posteriors_nottarget.csv")
symmetric_byitem_json <- toJSON(symmetric_byitem)
symmetric_bda <- webppl(paste("var itemData = ", symmetric_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_symmetric <- (symmetric_bda$posteriors)$support
write.csv(posteriors_symmetric, file = "posteriors/posteriors_symmetric.csv")
vizparams_bycondition <- function(posteriors) {
toplot <- posteriors %>%
select(cost_is,cost_lookslike,cost_not) %>%
gather(key = "parameter", value = "cost")
ggplot(toplot, aes(cost, fill = parameter)) + geom_density(alpha = 0.2) +
labs(x = "Inferred value", y = "Density")
}
vizparams_bycondition(posteriors_control)
vizparams_bycondition(posteriors_target)
vizparams_bycondition(posteriors_nottarget)
vizparams_bycondition(posteriors_symmetric)
full_bda <- webppl(paste("var itemData = ", d_total_JSON, "\n", bda))
full_posteriors <- (full_bda$posteriors)$support
full_maxap <- (full_bda$maxap)
write.csv(full_posteriors, file = "posteriors/posteriors_fulldata.csv")
bda_bycondition <- read_file("bda_bycondition.txt")
data_byitem <- function(cond, data) {
output <- data %>%
filter(condition == cond & kind == "critical" & type == "looks like") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
output <- merge(output, d_naming, by = "id")
output <- merge(output, d_noprompt, by = "id")
output <- output %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
}
symmetric_byitem <-data_byitem("symmetric",d)
control_byitem <-data_byitem("control",d)
target_byitem <-data_byitem("target",d)
nottarget_byitem <-data_byitem("nottarget",d)
control_byitem_json <- toJSON(control_byitem)
control_bda <- webppl(paste("var itemData = ", control_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_control <- (control_bda$posteriors)$support
write.csv(posteriors_control, file = "posteriors/posteriors_control.csv")
target_byitem_json <- toJSON(target_byitem)
target_bda <- webppl(paste("var itemData = ", target_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_target <- (target_bda$posteriors)$support
write.csv(posteriors_target, file = "posteriors/posteriors_target.csv")
nottarget_byitem_json <- toJSON(nottarget_byitem)
nottarget_bda <- webppl(paste("var itemData = ", nottarget_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_nottarget <- (nottarget_bda$posteriors)$support
write.csv(posteriors_nottarget, file = "posteriors/posteriors_nottarget.csv")
symmetric_byitem_json <- toJSON(symmetric_byitem)
symmetric_bda <- webppl(paste("var itemData = ", symmetric_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_symmetric <- (symmetric_bda$posteriors)$support
write.csv(posteriors_symmetric, file = "posteriors/posteriors_symmetric.csv")
vizparams_bycondition(posteriors_control)
vizparams_bycondition(posteriors_target)
vizparams_bycondition(posteriors_nottarget)
vizparams_bycondition(posteriors_target)
vizparams_bycondition(posteriors_nottarget)
vizparams_bycondition(posteriors_symmetric)
ggplot(full_posteriors, aes(alpha)) + geom_density(alpha = 0.2) +
labs(x = "Inferred alpha parameter value", y = "Density") # +
