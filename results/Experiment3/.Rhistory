geom_point() +
labs(x = "Condition", y = "Proportion") +
# ggtitle("Proportion of a competitor image chosen on 'looks like' trials\n(By item, Experiment 3)") +
theme(axis.text.x=element_text(angle=20,hjust=1,vjust=1))
ggplot(full_posteriors, aes(alpha)) + geom_density(alpha = 0.2) +
labs(x = "Inferred alpha parameter value", y = "Density") # +
vizparams_bycondition <- function(posteriors) {
toplot <- posteriors %>%
# select(cost_istarget,cost_looksliketarget,cost_nottarget) %>%
select(cost_is,cost_lookslike,cost_not) %>%
gather(key = "parameter", value = "cost")
ggplot(toplot, aes(cost, fill = parameter)) + geom_density(alpha = 0.2) +
labs(x = "Inferred value", y = "Density")
}
vizparams_bycondition(posteriors_control)
vizparams_bycondition(posteriors_target)
vizparams_bycondition(posteriors_control)
vizparams_bycondition <- function(posteriors) {
toplot <- posteriors %>%
select(cost_istarget,cost_looksliketarget,cost_nottarget) %>%
# select(cost_is,cost_lookslike,cost_not) %>%
gather(key = "parameter", value = "cost")
ggplot(toplot, aes(cost, fill = parameter)) + geom_density(alpha = 0.2) +
labs(x = "Inferred value", y = "Density")
}
vizparams_bycondition(posteriors_control)
vizparams_bycondition(posteriors_target)
vizparams_bycondition(posteriors_nottarget)
vizparams_bycondition(posteriors_symmetric)
vizparams_bycondition(posteriors_control)
vizparams_bycondition(posteriors_target)
vizparams_bycondition(posteriors_nottarget)
vizparams_bycondition(posteriors_symmetric)
target_predictives <- target_bda$predictions
nottarget_predictives <- nottarget_bda$predictions
symmetric_predictives <- symmetric_bda$predictions
control_predictives <- control_bda$predictions %>%
filter(id %in% symmetric_predictives$id)
target_byitem$condition <- "target"
nottarget_byitem$condition <- "nottarget"
symmetric_byitem$condition <- "symmetric"
control_byitem$condition <- "control"
target_predictive_toplot <- cbind(target_predictives,target_byitem$observed_competitor,target_byitem$condition)
nottarget_predictive_toplot <- cbind(nottarget_predictives,nottarget_byitem$observed_competitor,nottarget_byitem$condition)
symmetric_predictive_toplot <- cbind(symmetric_predictives,symmetric_byitem$observed_competitor,symmetric_byitem$condition)
control_predictive_toplot <- cbind(control_predictives,(control_byitem %>% filter (id %in% control_predictives$id))$observed_competitor,
(control_byitem %>% filter (id %in% control_predictives$id))$condition)
colnames(target_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(nottarget_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(control_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(symmetric_predictive_toplot) <- c("id","prediction","observation","condition")
toplot_predictive <- rbind(target_predictive_toplot, nottarget_predictive_toplot,
symmetric_predictive_toplot, control_predictive_toplot)
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen")
bda_bycondition <- read_file("bda_bycondition_3cost.txt")
data_byitem <- function(cond, data) {
output <- data %>%
filter(condition == cond & kind == "critical" & type == "looks like") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
output <- merge(output, d_naming, by = "id")
output <- merge(output, d_noprompt, by = "id")
output <- output %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
}
symmetric_byitem <-data_byitem("symmetric",d)
control_byitem <-data_byitem("control",d)
target_byitem <-data_byitem("target",d)
nottarget_byitem <-data_byitem("nottarget",d)
control_byitem_json <- toJSON(control_byitem)
control_bda <- webppl(paste("var itemData = ", control_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_control <- (control_bda$posteriors)$support
target_byitem_json <- toJSON(target_byitem)
target_bda <- webppl(paste("var itemData = ", target_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_target <- (target_bda$posteriors)$support
nottarget_byitem_json <- toJSON(nottarget_byitem)
nottarget_bda <- webppl(paste("var itemData = ", nottarget_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_nottarget <- (nottarget_bda$posteriors)$support
symmetric_byitem_json <- toJSON(symmetric_byitem)
symmetric_bda <- webppl(paste("var itemData = ", symmetric_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_symmetric <- (symmetric_bda$posteriors)$support
vizparams_bycondition <- function(posteriors) {
toplot <- posteriors %>%
select(cost_is,cost_not,cost_lookslike) %>%
# select(cost_istarget,cost_looksliketarget,cost_nottarget) %>%
# select(cost_is,cost_lookslike,cost_not) %>%
gather(key = "parameter", value = "cost")
ggplot(toplot, aes(cost, fill = parameter)) + geom_density(alpha = 0.2) +
labs(x = "Inferred value", y = "Density")
}
vizparams_bycondition(posteriors_control)
vizparams_bycondition <- function(posteriors) {
toplot <- posteriors %>%
select(cost_is,cost_not,cost_lookslike) %>%
# select(cost_istarget,cost_looksliketarget,cost_nottarget) %>%
gather(key = "parameter", value = "cost")
ggplot(toplot, aes(cost, fill = parameter)) + geom_density(alpha = 0.2) +
labs(x = "Inferred value", y = "Density")
}
vizparams_bycondition(posteriors_control)
vizparams_bycondition(posteriors_target)
vizparams_bycondition(posteriors_nottarget)
vizparams_bycondition(posteriors_symmetric)
target_predictives <- target_bda$predictions
nottarget_predictives <- nottarget_bda$predictions
symmetric_predictives <- symmetric_bda$predictions
control_predictives <- control_bda$predictions %>%
filter(id %in% symmetric_predictives$id)
target_byitem$condition <- "target"
nottarget_byitem$condition <- "nottarget"
symmetric_byitem$condition <- "symmetric"
control_byitem$condition <- "control"
target_predictive_toplot <- cbind(target_predictives,target_byitem$observed_competitor,target_byitem$condition)
nottarget_predictive_toplot <- cbind(nottarget_predictives,nottarget_byitem$observed_competitor,nottarget_byitem$condition)
symmetric_predictive_toplot <- cbind(symmetric_predictives,symmetric_byitem$observed_competitor,symmetric_byitem$condition)
control_predictive_toplot <- cbind(control_predictives,(control_byitem %>% filter (id %in% control_predictives$id))$observed_competitor,
(control_byitem %>% filter (id %in% control_predictives$id))$condition)
colnames(target_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(nottarget_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(control_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(symmetric_predictive_toplot) <- c("id","prediction","observation","condition")
toplot_predictive <- rbind(target_predictive_toplot, nottarget_predictive_toplot,
symmetric_predictive_toplot, control_predictive_toplot)
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen")
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
coord_fixed()
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
expand_limits(x = 0, y = 0)
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
expand_limits(x = c(0,1), y = c(0,1))
nottarget_byitem_json
bda_bycondition <- read_file("bda_bycondition_6cost.txt")
data_byitem <- function(cond, data) {
output <- data %>%
filter(condition == cond & kind == "critical" & type == "looks like") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
output <- merge(output, d_naming, by = "id")
output <- merge(output, d_noprompt, by = "id")
output <- output %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
}
symmetric_byitem <-data_byitem("symmetric",d)
control_byitem <-data_byitem("control",d)
target_byitem <-data_byitem("target",d)
nottarget_byitem <-data_byitem("nottarget",d)
control_byitem_json <- toJSON(control_byitem)
control_bda <- webppl(paste("var itemData = ", control_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_control <- (control_bda$posteriors)$support
target_byitem_json <- toJSON(target_byitem)
target_bda <- webppl(paste("var itemData = ", target_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_target <- (target_bda$posteriors)$support
nottarget_byitem_json <- toJSON(nottarget_byitem)
nottarget_bda <- webppl(paste("var itemData = ", nottarget_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_nottarget <- (nottarget_bda$posteriors)$support
symmetric_byitem_json <- toJSON(symmetric_byitem)
symmetric_bda <- webppl(paste("var itemData = ", symmetric_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_symmetric <- (symmetric_bda$posteriors)$support
target_predictives <- target_bda$predictions
nottarget_predictives <- nottarget_bda$predictions
symmetric_predictives <- symmetric_bda$predictions
control_predictives <- control_bda$predictions %>%
filter(id %in% symmetric_predictives$id)
target_byitem$condition <- "target"
nottarget_byitem$condition <- "nottarget"
symmetric_byitem$condition <- "symmetric"
control_byitem$condition <- "control"
target_predictive_toplot <- cbind(target_predictives,target_byitem$observed_competitor,target_byitem$condition)
nottarget_predictive_toplot <- cbind(nottarget_predictives,nottarget_byitem$observed_competitor,nottarget_byitem$condition)
symmetric_predictive_toplot <- cbind(symmetric_predictives,symmetric_byitem$observed_competitor,symmetric_byitem$condition)
control_predictive_toplot <- cbind(control_predictives,(control_byitem %>% filter (id %in% control_predictives$id))$observed_competitor,
(control_byitem %>% filter (id %in% control_predictives$id))$condition)
colnames(target_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(nottarget_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(control_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(symmetric_predictive_toplot) <- c("id","prediction","observation","condition")
toplot_predictive <- rbind(target_predictive_toplot, nottarget_predictive_toplot,
symmetric_predictive_toplot, control_predictive_toplot)
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
expand_limits(x = c(0,1), y = c(0,1))
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
expand_limits(x = c(0,0.6), y = c(0,0.6))
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
expand_limits(x = c(0,0.6), y = c(0,0.6)) +
geom_abline()
bda <- read_file("bda_inferglobal_6cost.txt")
d_total <- d %>%
filter(kind == "critical" & type == "looks like") %>%
group_by(id,condition) %>%summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
d_total <- merge(d_total, d_naming, by = "id")
d_total <- merge(d_total, d_noprompt, by = "id")
d_total <- d_total %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
d_total_JSON <- toJSON(d_total)
full_bda <- webppl(paste("var itemData = ", d_total_JSON, "\n", bda))
bda_bycondition <- read_file("bda_bycondition_6cost.txt")
data_byitem <- function(cond, data) {
output <- data %>%
filter(condition == cond & kind == "critical" & type == "looks like") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
output <- merge(output, d_naming, by = "id")
output <- merge(output, d_noprompt, by = "id")
output <- output %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
}
symmetric_byitem <-data_byitem("symmetric",d)
control_byitem <-data_byitem("control",d)
target_byitem <-data_byitem("target",d)
nottarget_byitem <-data_byitem("nottarget",d)
control_byitem_json <- toJSON(control_byitem)
control_bda <- webppl(paste("var itemData = ", control_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_control <- (control_bda$posteriors)$support
target_byitem_json <- toJSON(target_byitem)
target_bda <- webppl(paste("var itemData = ", target_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_target <- (target_bda$posteriors)$support
nottarget_byitem_json <- toJSON(nottarget_byitem)
nottarget_bda <- webppl(paste("var itemData = ", nottarget_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_nottarget <- (nottarget_bda$posteriors)$support
bda_bycondition <- read_file("bda_bycondition_6cost.txt")
data_byitem <- function(cond, data) {
output <- data %>%
filter(condition == cond & kind == "critical" & type == "looks like") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
output <- merge(output, d_naming, by = "id")
output <- merge(output, d_noprompt, by = "id")
output <- output %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
}
symmetric_byitem <-data_byitem("symmetric",d)
control_byitem <-data_byitem("control",d)
target_byitem <-data_byitem("target",d)
nottarget_byitem <-data_byitem("nottarget",d)
control_byitem_json <- toJSON(control_byitem)
control_bda <- webppl(paste("var itemData = ", control_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_control <- (control_bda$posteriors)$support
target_byitem_json <- toJSON(target_byitem)
target_bda <- webppl(paste("var itemData = ", target_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
d_noprompt <- read.csv("results_noprompt.csv")
levels(d_noprompt$language) # KEEP DATA IF LANGUAGE = SOME SPELLING VARIATION OF 'ENGLISH' (OR NA)
noprompt_to_exclude <- d %>%
group_by(workerid, type, selection) %>%
filter((type == "left" && selection == "right") || (type == "right" && selection  == "left")) %>%
group_by(workerid) %>%
summarize(n_mistakes = n()) %>%
filter(n_mistakes > 0)
d_noprompt <- d_noprompt %>%
filter(!(workerid %in% noprompt_to_exclude$workerid))
d_noprompt <- d_noprompt %>%
filter(kind == "critical") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
competitor_prior = ncompetitor / (ncompetitor + ntarget))
d_naming <- read.csv("results_naming.csv")
d_naming <- d_naming %>%
group_by(id) %>%
summarize(nknowtarget = sum(type == "target" & know == "True"),
nknowcompetitor = sum(type == "competitor" & know == "True"),
target_nameability = nknowtarget / sum(type == "target"),
competitor_nameability = nknowcompetitor / sum(type == "competitor"))
bda <- read_file("bda_inferglobal_6cost.txt")
d_total <- d %>%
filter(kind == "critical" & type == "looks like") %>%
group_by(id,condition) %>%summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
bda_bycondition <- read_file("bda_bycondition_6cost.txt")
data_byitem <- function(cond, data) {
output <- data %>%
filter(condition == cond & kind == "critical" & type == "looks like") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
output <- merge(output, d_naming, by = "id")
output <- merge(output, d_noprompt, by = "id")
output <- output %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
}
symmetric_byitem <-data_byitem("symmetric",d)
control_byitem <-data_byitem("control",d)
target_byitem <-data_byitem("target",d)
nottarget_byitem <-data_byitem("nottarget",d)
control_byitem_json <- toJSON(control_byitem)
control_byitem_json <- toJSON(control_byitem)
control_bda <- webppl(paste("var itemData = ", control_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_control <- (control_bda$posteriors)$support
target_byitem_json <- toJSON(target_byitem)
target_bda <- webppl(paste("var itemData = ", target_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_target <- (target_bda$posteriors)$support
nottarget_byitem_json <- toJSON(nottarget_byitem)
nottarget_bda <- webppl(paste("var itemData = ", nottarget_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_nottarget <- (nottarget_bda$posteriors)$support
symmetric_byitem_json <- toJSON(symmetric_byitem)
symmetric_bda <- webppl(paste("var itemData = ", symmetric_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_symmetric <- (symmetric_bda$posteriors)$support
target_predictives <- target_bda$predictions
nottarget_predictives <- nottarget_bda$predictions
symmetric_predictives <- symmetric_bda$predictions
control_predictives <- control_bda$predictions %>%
filter(id %in% symmetric_predictives$id)
target_byitem$condition <- "target"
nottarget_byitem$condition <- "nottarget"
symmetric_byitem$condition <- "symmetric"
control_byitem$condition <- "control"
target_predictive_toplot <- cbind(target_predictives,target_byitem$observed_competitor,target_byitem$condition)
nottarget_predictive_toplot <- cbind(nottarget_predictives,nottarget_byitem$observed_competitor,nottarget_byitem$condition)
symmetric_predictive_toplot <- cbind(symmetric_predictives,symmetric_byitem$observed_competitor,symmetric_byitem$condition)
control_predictive_toplot <- cbind(control_predictives,(control_byitem %>% filter (id %in% control_predictives$id))$observed_competitor,
(control_byitem %>% filter (id %in% control_predictives$id))$condition)
colnames(target_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(nottarget_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(control_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(symmetric_predictive_toplot) <- c("id","prediction","observation","condition")
toplot_predictive <- rbind(target_predictive_toplot, nottarget_predictive_toplot,
symmetric_predictive_toplot, control_predictive_toplot)
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
expand_limits(x = c(0,0.6), y = c(0,0.6)) +
geom_abline()
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
expand_limits(x = c(0,1), y = c(0,1)) +
geom_abline()
control_byitem_json <- toJSON(control_byitem)
control_bda <- webppl(paste("var itemData = ", control_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_control <- (control_bda$posteriors)$support
target_byitem_json <- toJSON(target_byitem)
target_bda <- webppl(paste("var itemData = ", target_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_target <- (target_bda$posteriors)$support
nottarget_byitem_json <- toJSON(nottarget_byitem)
nottarget_bda <- webppl(paste("var itemData = ", nottarget_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_nottarget <- (nottarget_bda$posteriors)$support
symmetric_byitem_json <- toJSON(symmetric_byitem)
symmetric_bda <- webppl(paste("var itemData = ", symmetric_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_symmetric <- (symmetric_bda$posteriors)$support
target_predictives <- target_bda$predictions
nottarget_predictives <- nottarget_bda$predictions
symmetric_predictives <- symmetric_bda$predictions
control_predictives <- control_bda$predictions %>%
filter(id %in% symmetric_predictives$id)
target_byitem$condition <- "target"
nottarget_byitem$condition <- "nottarget"
symmetric_byitem$condition <- "symmetric"
control_byitem$condition <- "control"
target_predictive_toplot <- cbind(target_predictives,target_byitem$observed_competitor,target_byitem$condition)
nottarget_predictive_toplot <- cbind(nottarget_predictives,nottarget_byitem$observed_competitor,nottarget_byitem$condition)
symmetric_predictive_toplot <- cbind(symmetric_predictives,symmetric_byitem$observed_competitor,symmetric_byitem$condition)
control_predictive_toplot <- cbind(control_predictives,(control_byitem %>% filter (id %in% control_predictives$id))$observed_competitor,
(control_byitem %>% filter (id %in% control_predictives$id))$condition)
colnames(target_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(nottarget_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(control_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(symmetric_predictive_toplot) <- c("id","prediction","observation","condition")
toplot_predictive <- rbind(target_predictive_toplot, nottarget_predictive_toplot,
symmetric_predictive_toplot, control_predictive_toplot)
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
expand_limits(x = c(0,1), y = c(0,1)) +
geom_abline()
# bda_bycondition <- read_file("bda_bycondition_6cost.txt")
bda_bycondition <- read_file("bda_bycondition_3cost.txt")
data_byitem <- function(cond, data) {
output <- data %>%
filter(condition == cond & kind == "critical" & type == "looks like") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
output <- merge(output, d_naming, by = "id")
output <- merge(output, d_noprompt, by = "id")
output <- output %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
}
symmetric_byitem <-data_byitem("symmetric",d)
control_byitem <-data_byitem("control",d)
target_byitem <-data_byitem("target",d)
nottarget_byitem <-data_byitem("nottarget",d)
control_byitem_json <- toJSON(control_byitem)
control_bda <- webppl(paste("var itemData = ", control_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_control <- (control_bda$posteriors)$support
target_byitem_json <- toJSON(target_byitem)
target_bda <- webppl(paste("var itemData = ", target_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_target <- (target_bda$posteriors)$support
nottarget_byitem_json <- toJSON(nottarget_byitem)
nottarget_bda <- webppl(paste("var itemData = ", nottarget_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_nottarget <- (nottarget_bda$posteriors)$support
symmetric_byitem_json <- toJSON(symmetric_byitem)
symmetric_bda <- webppl(paste("var itemData = ", symmetric_byitem_json,
"\n var alpha =", full_maxap$alpha,
"\n", bda_bycondition))
posteriors_symmetric <- (symmetric_bda$posteriors)$support
dodge = position_dodge(.9)
target_predictives <- target_bda$predictions
nottarget_predictives <- nottarget_bda$predictions
symmetric_predictives <- symmetric_bda$predictions
control_predictives <- control_bda$predictions %>%
filter(id %in% symmetric_predictives$id)
target_byitem$condition <- "target"
nottarget_byitem$condition <- "nottarget"
symmetric_byitem$condition <- "symmetric"
control_byitem$condition <- "control"
target_predictive_toplot <- cbind(target_predictives,target_byitem$observed_competitor,target_byitem$condition)
nottarget_predictive_toplot <- cbind(nottarget_predictives,nottarget_byitem$observed_competitor,nottarget_byitem$condition)
symmetric_predictive_toplot <- cbind(symmetric_predictives,symmetric_byitem$observed_competitor,symmetric_byitem$condition)
control_predictive_toplot <- cbind(control_predictives,(control_byitem %>% filter (id %in% control_predictives$id))$observed_competitor,
(control_byitem %>% filter (id %in% control_predictives$id))$condition)
colnames(target_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(nottarget_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(control_predictive_toplot) <- c("id","prediction","observation","condition")
colnames(symmetric_predictive_toplot) <- c("id","prediction","observation","condition")
toplot_predictive <- rbind(target_predictive_toplot, nottarget_predictive_toplot,
symmetric_predictive_toplot, control_predictive_toplot)
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
expand_limits(x = c(0,1), y = c(0,1)) +
geom_abline()
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
expand_limits(x = c(0,75), y = c(0,75)) +
geom_abline()
ggplot(toplot_predictive, aes(x=prediction, y=observation, color = condition)) + geom_point() +
labs(x = "Predicted proportion of competitor chosen", y = "Observed proportion of competitor chosen") +
expand_limits(x = c(0,0.75), y = c(0,0.75)) +
geom_abline()
toplot_nameability <- rbind(target_byitem,nottarget_byitem,symmetric_byitem,control_byitem)
competitor_nameability_plot <- ggplot(toplot_nameability, aes(x=competitor_nameability, y = observed_competitor)) +
facet_wrap(~condition) +
geom_point() +
geom_smooth(method='lm',formula=y~x)
d_filtered_total <- merge(d_filtered, d_naming, by = "id")
m_nameability <- glm (selection ~ condition * competitor_nameability, family = "binomial", data = d_filtered_total)
competitor_nameability_plot
competitor_nameability_plot <- ggplot(toplot_nameability, aes(x=competitor_nameability, y = observed_competitor)) +
facet_wrap(~condition) +
labs(x = "Competitor nameability", y = "Observed proportion of competitor chosen") +
geom_point() +
geom_smooth(method='lm',formula=y~x)
competitor_nameability_plot
summary(m_nameability)
glmer(selection ~ condition * competitor_nameability + (1|workerid) + (1 + condition|id), family = "binomial", data = d_filtered_total)
summary(glmer(selection ~ condition * competitor_nameability + (1|workerid) + (1 + condition|id), family = "binomial", data = d_filtered_total))
summary(glmer(selection ~ condition * competitor_nameability + (1|workerid), family = "binomial", data = d_filtered_total))
save.image("~/Documents/GitHub/alts/results/Experiment3/jan23.RData")
