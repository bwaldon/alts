var alpha = 3.57

var statePrior = function(c) {
  return flip(c) ? "competitor" : "target"
 };

var utterancePrior = function(item,cost_is,cost_not,cost_lookslike) {
  var uttProbs = map(function(u) {return Math.exp(-cost(item,cost_is,cost_not,cost_lookslike)[u]) }, utterances);
  return categorical(uttProbs, utterances);
};

var literalMeanings = {
  looksliketarget: function(state) { return state == "target" || state == "competitor"; },
  istarget: function(state) { return state == "target"; },
  nottarget: function(state) {return state == "competitor";  },
  lookslikecompetitor: function(state) { return state == "target" || state == "competitor"; },
  iscompetitor: function(state) { return state == "competitor"; },
  notcompetitor: function(state) {return state == "target";  },
};

var literalListener = cache(function(utt) {
  return Infer({model: function(){
    var state = statePrior()
    var meaning = literalMeanings[utt]
    condition(meaning(state))
    return state
  }})
});

// pragmatic speaker
var speaker = cache(function(state,item,cost_is,cost_not,cost_lookslike) {
  return Infer({model: function(){
    var utt = utterancePrior(item,cost_is,cost_not,cost_lookslike)
    factor(alpha * literalListener(utt).score(state))
    return utt
  }})
});

// pragmatic listener
  
var pragmaticListener = cache(function(item,cost_is,cost_not,cost_lookslike) {
  return Infer({model: function(){
    var state = statePrior(item.competitor_prior)
    observe(speaker(state,item,cost_is,cost_not,cost_lookslike),"looksliketarget")
    return state
  }})
});

var dataAnalysis2 = function(){
  // prior over model parameter
 var cost_lookslike = uniformDrift({a: 0, b: 5, w: 1})
 var cost_is = uniformDrift({a: 0, b: 5, w: 1})
 var cost_not = uniformDrift({a: 0, b: 5, w: 1})
  mapData({data: itemData}, function(d) {
    var prediction = Math.exp(pragmaticListener(d,cost_is,cost_not,cost_lookslike).score("competitor"))
    observe(Gaussian({mu: prediction, sigma: 0.01}), d.observed_competitor)
  })
  return {cost_is: cost_is,
         cost_not: cost_not,
         cost_lookslike: cost_lookslike
};
}

var posterior_samples = Infer({method: "MCMC", samples: 1000, burn: 10000, lag: 10, verbose: true, model: dataAnalysis2})

var maxap = posterior_samples.MAP().val
                   
var predictions = map(function(i) { return {id: i.id, 
                                           prediction: Math.exp(pragmaticListener(i, 
                                                                                  maxap.cost_is, 
                                                                                  maxap.cost_not, 
                                                                                  maxap.cost_lookslike                                                                  
                                                                                  ).score("competitor")) 
                                          } } , itemData)


var out = {predictions: predictions, posteriors: posterior_samples._cachedsupport}

json.write(resultsfileName, out)
