var statePrior = function(c) {
  return flip(c) ? "competitor" : "target"
};

var utterances = ["istarget", "looksliketarget","nottarget","iscompetitor","notcompetitor","lookslikecompetitor"];

var model = function() {
 
 // could change
 var cost_lookslike = uniformDrift({a: 0, b: 5, w: 1})
 var cost_not = uniformDrift({a: 0, b: 5, w: 1})
 var cost_is = uniformDrift({a: 0, b: 5, w: 1})

// simplifying assumption: cost of "It's a [target]" is directly proportional to 
// cost of form "It's an X", inversely proportional to nameability of target
 
var cost = function (item,cost_is,cost_not,cost_lookslike) {
  return {
  "istarget": cost_is / (item.target_nameability / item.competitor_nameability),
  "nottarget" : cost_not / (item.target_nameability / item.competitor_nameability),
  "looksliketarget": cost_lookslike / (item.target_nameability / item.competitor_nameability),
  "iscompetitor" : cost_is / (item.competitor_nameability / target_nameability),
  "notcompetitor" : cost_not / (item.competitor_nameability / target_nameability),
   "lookslikecompetitor" : cost_lookslike / (item.competitor_nameability / target_nameability)
};
} 

var utterancePrior = function(item) {
  var uttProbs = map(function(u) {return Math.exp(-cost(item)[u]) }, utterances);
  return categorical(uttProbs, utterances);
};

var literalMeanings = {
  looksliketarget: function(state) { return state == "target" || state == "competitor"; },
  lookslikecompetitor: function(state) { return state == "target" || state == "competitor"; },
  istarget: function(state) { return state == "target"; },
  nottarget: function(state) {return state == "competitor";  },
  iscompetitor : function(state) {return state == "competitor";  },
  notcompetitor : function(state) { return state == "target"; },
};

var literalListener = cache(function(utt) {
  return Infer({model: function(){
    var state = statePrior()
    var meaning = literalMeanings[utt]
    condition(meaning(state))
    return state
  }})
});

// set speaker optimality
var alpha = uniformDrift({a: 0, b: 5, w: 1})

// pragmatic speaker
var speaker = cache(function(state,item) {
  return Infer({model: function(){
    var utt = utterancePrior(item)
    factor(alpha * literalListener(utt).score(state))
    return utt
  }})
});

// pragmatic listener
  
var f = function(d) {
  var posts = Infer({model: function(){
    var state = statePrior(d.competitor_prior)
    observe(speaker(state,d),"looksliketarget")
    return state
  }})

var predicted_competitor = Math.abs(Math.exp(posts.score(["competitor"])))

observe(Gaussian({mu: predicted_competitor, sigma: 0.0005}), d.observed_competitor)

}

map(f, itemData)

return {
  cost_is: cost_is,
  cost_lookslike: cost_lookslike,
  cost_not: cost_not,
  alpha : alpha,
  };
  
}

var inferenceSettings = {
  model: model, method:'MCMC',
  // callbacks: [editor.MCMCProgress()],
  verbose: true,
  samples: 2000,
  lag: 10,
  burn: 20000
};

var output = Infer(inferenceSettings)

var maxap = (output.MAP().val)

var model_posterior = function(item) {

 var cost_is = maxap.cost_is
 var cost_lookslike = maxap.cost_lookslike
 var cost_not = maxap.cost_not
 
var cost = {
  "istarget": cost_is / item.target_nameability,
  "nottarget" : cost_not / item.target_nameability,
  "looksliketarget": cost_lookslike / item.target_nameability,
  "iscompetitor" : cost_is / item.competitor_nameability,
  "notcompetitor" : cost_not / item.competitor_nameability,
  "lookslikecompetitor": cost_lookslike / item.competitor_nameability,
};

var utterancePrior = function() {
  var uttProbs = map(function(u) {return Math.exp(-cost[u]) }, utterances);
  return categorical(uttProbs, utterances);
};

var literalMeanings = {
  looksliketarget: function(state) { return state == "target" || state == "competitor"; },
  lookslikecompetitor: function(state) { return state == "target" || state == "competitor"; },
  istarget: function(state) { return state == "target"; },
  nottarget: function(state) {return state == "competitor";  },
  iscompetitor : function(state) {return state == "competitor";  },
  notcompetitor : function(state) { return state == "target"; },
};

var literalListener = cache(function(utt) {
  return Infer({model: function(){
    var state = statePrior()
    var meaning = literalMeanings[utt]
    condition(meaning(state))
    return state
  }})
});

// set speaker optimality
var alpha = maxap.alpha

// pragmatic speaker
var speaker = cache(function(state,item) {
  return Infer({model: function(){
    var utt = utterancePrior(item)
    factor(alpha * literalListener(utt).score(state))
    return utt
  }})
});

// pragmatic listener
  
var posts = Infer({model: function(){
    var state = statePrior(item.competitor_prior)
    observe(speaker(state,item),"looksliketarget")
    return state
} });

return posts
                   
}

var predictions = map(function(i) {return {id: i.id, prediction: Math.exp(model_posterior(i).score("competitor"))} }, itemData)   

var out = {predictions: predictions, posteriors: output, maxap: maxap}

out