var utterances = ["istarget", "looksliketarget","nottarget","iscompetitor","notcompetitor","lookslikecompetitor"];
  
var statePrior = function(c) {
  return flip(c) ? "competitor" : "target"
 };

  
var cost = function (item,cost_is,cost_not,cost_lookslike) {
  return {
  "istarget": cost_is / ((item.target_nameability)),
  "nottarget" : cost_not / ((item.target_nameability)),
  "looksliketarget": cost_lookslike / ((item.target_nameability)),
  "iscompetitor" : cost_is / ((item.competitor_nameability)),
  "notcompetitor" : cost_not / ((item.competitor_nameability)),
  "lookslikecompetitor" : cost_lookslike / ((item.competitor_nameability))
};
} 

var utterancePrior = function(item,cost_is,cost_not,cost_lookslike) {
  var uttProbs = map(function(u) {return Math.exp(-cost(item,cost_is,cost_not,cost_lookslike)[u]) }, utterances);
  return categorical(uttProbs, utterances);
};

var literalMeanings = {
  looksliketarget: function(state) { return state == "target" || state == "competitor"; },
  istarget: function(state) { return state == "target"; },
  nottarget: function(state) {return state == "competitor";  },
  lookslikecompetitor: function(state) { return state == "target" || state == "competitor"; },
  iscompetitor: function(state) { return state == "competitor"; },
  notcompetitor: function(state) {return state == "target";  },
};

var literalListener = cache(function(utt) {
  return Infer({model: function(){
    var state = statePrior()
    var meaning = literalMeanings[utt]
    condition(meaning(state))
    return state
  }})
});

var speaker = cache(function(state,item,cost_is,cost_not,cost_lookslike,alpha) {
  return Infer({model: function(){
    var utt = utterancePrior(item,cost_is,cost_not,cost_lookslike)
    factor(alpha * literalListener(utt).score(state))
    return utt
  }})
});

// pragmatic listener
  
var pragmaticListener = cache(function(item,cost_is,cost_not,cost_lookslike,alpha) {
  return Infer({model: function(){
    var state = statePrior(item.competitor_prior)
    observe(speaker(state,item,cost_is,cost_not,cost_lookslike,alpha),"looksliketarget")
    return state
  }})
});

// speaker("target",itemData[0],1,1,1)
// pragmaticListener(itemData[0],10,1,1)

var dataAnalysis2 = function(){
  // prior over model parameter
 var cost_lookslike = uniformDrift({a: 0, b: 5, w: 1})
 var cost_is = uniformDrift({a: 0, b: 5, w: 1})
 var cost_not = uniformDrift({a: 0, b: 5, w: 1})
 var alpha = uniformDrift({a: 0, b: 5, w: 1})
  mapData({data: itemData}, function(d) {
    var prediction = Math.exp(pragmaticListener(d,cost_is,cost_not,cost_lookslike,alpha).score("competitor"))
    observe(Gaussian({mu: prediction, sigma: 0.1}), d.observed_competitor)
  })
  return {cost_is: cost_is,
         cost_not: cost_not,
         cost_lookslike: cost_lookslike,
      	 alpha: alpha};
}

var posterior_samples = Infer({
  method: "MCMC",
  samples: 100,   // how many samples to obtain
  burn: 1000,     // number of steps for algorithm to adapt
  lag: 10,
  verbose: true,
  //callbacks: [editor.MCMCProgress()],
  model: dataAnalysis2})

// viz.marginals(posterior_samples)

var maxap = posterior_samples.MAP().val
                   
var predictions = map(function(i) { return {id: i.id, 
                                           prediction: Math.exp(pragmaticListener(i, maxap.cost_is,
                                                                                  maxap.cost_lookslike, 
                                                                                  maxap.cost_not,
                                                                                  maxap.alpha).score("competitor")) 
                                          } } , itemData)

var out = {posteriors: posterior_samples, predictions: predictions, maxap: maxap}

out