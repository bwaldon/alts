install.packages("tidyverse")
names(knitr::knit_engines$get())
install.pandoc()
install.packages("installr")
install.packages("brms")
setwd("~/Documents/GitHub/alts/writing/jdhandout_110")
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
setwd("~/Documents/GitHub/alts")
d <- read.csv("results/Experiments1-2/results.csv",header = TRUE, stringsAsFactors = FALSE)
d[d$target == "tasty",]$target <- "palatable"
d <- data.frame(lapply(d, function(x) {
gsub('"', '', x)
}))
d <- data.frame(lapply(d, function(x) {
gsub('\\\\', '', x)
}))
exp1 <- d %>%
filter(Answer.list %in% c("list1_str", "list2_str"))
length(unique(exp1$workerid)) #should be 93
d <- read.csv("results/Experiments1-2/results.csv",header = TRUE, stringsAsFactors = FALSE)
d[d$target == "tasty",]$target <- "palatable"
d <- data.frame(lapply(d, function(x) {
gsub('"', '', x)
}))
d <- data.frame(lapply(d, function(x) {
gsub('\\\\', '', x)
}))
exp1 <- d %>%
filter(Answer.list %in% c("list1_str", "list2_str"))
length(unique(exp1$workerid)) #should be 93
exp1 <- d %>%
filter(Answer.list %in% c("list1_str", "list2_str"))
library(tidyverse)
library(bootstrap)
library(formatR)
library(reshape)
library(lme4)
library(lmerTest)
library(lsmeans)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
setwd("~/Documents/GitHub/alts")
d <- read.csv("results/Experiments1-2/results.csv",header = TRUE, stringsAsFactors = FALSE)
d[d$target == "tasty",]$target <- "palatable"
d <- data.frame(lapply(d, function(x) {
gsub('"', '', x)
}))
d <- data.frame(lapply(d, function(x) {
gsub('\\\\', '', x)
}))
exp1 <- d %>%
filter(Answer.list %in% c("list1_str", "list2_str"))
length(unique(exp1$workerid)) #should be 93
unique(exp1$language) # no one in exp1 needs to be excluded by virtue of native lang.
exp1$correct <- 0
exp1[exp1$id %in% c("high_right1","high_right2","high_right3"),]$correct <- "high"
exp1[exp1$id %in% c("low_right1","low_right2","low_right3"),]$correct <- "low"
exp1$response <- as.numeric(exp1$response)
d_excl_exp1 <- exp1 %>%
group_by(workerid, id, correct) %>%
summarize(response) %>%
filter((correct == "high" && response < 50) || (correct == "low" && response > 50)) %>%
group_by(workerid) %>%
summarize(n_mistakes = n()) %>%
filter(n_mistakes > 1)
exp1 <- exp1 %>%
filter(!(workerid %in% d_excl_exp1$workerid)) %>%
filter(type %in% c("prime","crit"))
length(unique(exp1$workerid)) # should now be 79
fillTheBlanks <- function(x, missing="na"){
rle <- rle(as.character(x))
empty <- which(rle$value==missing)
rle$values[empty] <- rle$value[empty-1]
inverse.rle(rle)
}
exp1$primetype <- fillTheBlanks(exp1$primetype)
nrow(d %>% filter(primetype == "Noprime"))
View(d)
View(exp1)
nrow(exp1 %>% filter(primetype == "no"))
nrow(exp1 %>% filter(primetype == "str"))
myCenter= function(x) {
if (is.numeric(x)) { return(x - mean(x, na.rm=T)) }
if (is.factor(x)) {
x= as.numeric(x)
return(x - mean(x, na.rm=T))
}
if (is.data.frame(x) || is.matrix(x)) {
m= matrix(nrow=nrow(x), ncol=ncol(x))
colnames(m)= paste("c", colnames(x), sep="")
for (i in 1:ncol(x)) {
m[,i]= myCenter(x[,i])
}
return(as.data.frame(m))
}
}
exp1$primetype_centered <- myCenter(exp1$primetype)
exp1$primetype_centered
myCenter(exp1$primetype)
myCenter(factor(exp1$primetype))
exp1$primetype_centered <- myCenter(factor(exp1$primetype))
m_exp1_c <- lmer(response ~ primetype_centered * target + (primetype_centered|workerid), data = exp1 %>% filter(type == "crit"))
summary(m_exp1_c)
scale_means <- exp1 %>%
filter(type == "crit") %>%
group_by(target) %>%
summarize(mean = mean(response)) %>%
arrange(mean)
exp1$target <- factor(exp1$target, levels = scale_means$target)
myCenter= function(x) {
if (is.numeric(x)) { return(x - mean(x, na.rm=T)) }
if (is.factor(x)) {
x= as.numeric(x)
return(x - mean(x, na.rm=T))
}
if (is.data.frame(x) || is.matrix(x)) {
m= matrix(nrow=nrow(x), ncol=ncol(x))
colnames(m)= paste("c", colnames(x), sep="")
for (i in 1:ncol(x)) {
m[,i]= myCenter(x[,i])
}
return(as.data.frame(m))
}
}
exp1$primetype_centered <- myCenter(factor(exp1$primetype))
m_exp1_c <- lmer(response ~ primetype_centered * target + (primetype_centered|workerid), data = exp1 %>% filter(type == "crit"))
summary(m_exp1_c)
exp1$target_centered <- myCenter(exp1$target)
m_exp1_c <- lmer(response ~ primetype_centered * target_centered + (primetype_centered|workerid), data = exp1 %>% filter(type == "crit"))
summary(m_exp1_c)
exp1$primetype_centered <- myCenter(factor(exp1$primetype))
m_exp1_c <- lmer(response ~ primetype_centered * target + (primetype_centered|workerid), data = exp1 %>% filter(type == "crit"))
summary(m_exp1_c)
lsmeans(m_exp1_c, revpairwise~target)
lsmeans(m_exp1_c, revpairwise~primteype_centered * target)
lsmeans(m_exp1_c, revpairwise~primetype_centered * target)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
setwd("~/Documents/GitHub/ad_qp")
d <- read.csv("results/6scale_full/results.csv",header = TRUE, stringsAsFactors = FALSE)
d[d$target == "tasty",]$target <- "palatable"
d <- data.frame(lapply(d, function(x) {
gsub('"', '', x)
}))
d <- data.frame(lapply(d, function(x) {
gsub('\\\\', '', x)
}))
exp2 <- d %>%
filter(Answer.list %in% c("list1_exh", "list2_exh"))
length(unique(exp2$workerid)) #should be 107
unique(exp2$language) # two people in exp2 need to be excluded by virtue of native lang.
lang_excl <- exp2 %>%
filter(language %in% c("Italian","Urdu")) %>%
group_by(language) %>%
summarize(n = n()/32)
exp2 <- exp2 %>%
filter(!(language %in% c("Italian","Urdu")))
exp2$correct <- 0
exp2[exp2$id %in% c("high_right1","high_right2","high_right3"),]$correct <- "high"
exp2[exp2$id %in% c("low_right1","low_right2","low_right3"),]$correct <- "low"
exp2$response <- as.numeric(exp2$response)
d_excl_exp2 <- exp2 %>%
group_by(workerid, id, correct) %>%
summarize(response) %>%
filter((correct == "high" && response < 50) || (correct == "low" && response > 50)) %>%
group_by(workerid) %>%
summarize(n_mistakes = n()) %>%
filter(n_mistakes > 1)
exp2 <- exp2 %>%
filter(!(workerid %in% d_excl_exp2$workerid)) %>%
filter(type %in% c("prime","crit"))
length(unique(exp2$workerid)) # should now be 102
fillTheBlanks <- function(x, missing="na"){
rle <- rle(as.character(x))
empty <- which(rle$value==missing)
rle$values[empty] <- rle$value[empty-1]
inverse.rle(rle)
}
exp2$primetype <- fillTheBlanks(exp2$primetype)
myCenter= function(x) {
if (is.numeric(x)) { return(x - mean(x, na.rm=T)) }
if (is.factor(x)) {
x= as.numeric(x)
return(x - mean(x, na.rm=T))
}
if (is.data.frame(x) || is.matrix(x)) {
m= matrix(nrow=nrow(x), ncol=ncol(x))
colnames(m)= paste("c", colnames(x), sep="")
for (i in 1:ncol(x)) {
m[,i]= myCenter(x[,i])
}
return(as.data.frame(m))
}
}
exp2$primetype_centered <- myCenter(factor(exp2$primetype))
exp2$primetype_centered <- myCenter(factor(exp2$primetype))
m_exp2_c <- lmer(response ~ primetype_centered * target + (primetype_centered|workerid), data = exp2 %>% filter(type == "crit"))
scale_means <- exp2 %>%
filter(type == "crit") %>%
group_by(target) %>%
summarize(mean = mean(response)) %>%
arrange(mean)
exp2$target <- factor(exp2$target, levels = scale_means$target)
m_exp2_c <- lmer(response ~ primetype_centered * target + (primetype_centered|workerid), data = exp2 %>% filter(type == "crit"))
summary(m_exp2_c)
m_exp1 <- lmer(response ~ primetype * target + (primetype|workerid), data = exp1 %>% filter(type == "crit"))
summary(m_exp1)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
setwd("~/Documents/GitHub/alts")
d <- read.csv("results/Experiments1-2/results.csv",header = TRUE, stringsAsFactors = FALSE)
d[d$target == "tasty",]$target <- "palatable"
d <- data.frame(lapply(d, function(x) {
gsub('"', '', x)
}))
d <- data.frame(lapply(d, function(x) {
gsub('\\\\', '', x)
}))
exp1 <- d %>%
filter(Answer.list %in% c("list1_str", "list2_str"))
length(unique(exp1$workerid)) #should be 93
unique(exp1$language) # no one in exp1 needs to be excluded by virtue of native lang.
exp1$correct <- 0
exp1[exp1$id %in% c("high_right1","high_right2","high_right3"),]$correct <- "high"
exp1[exp1$id %in% c("low_right1","low_right2","low_right3"),]$correct <- "low"
exp1$response <- as.numeric(exp1$response)
d_excl_exp1 <- exp1 %>%
group_by(workerid, id, correct) %>%
summarize(response) %>%
filter((correct == "high" && response < 50) || (correct == "low" && response > 50)) %>%
group_by(workerid) %>%
summarize(n_mistakes = n()) %>%
filter(n_mistakes > 1)
exp1 <- exp1 %>%
filter(!(workerid %in% d_excl_exp1$workerid)) %>%
filter(type %in% c("prime","crit"))
length(unique(exp1$workerid)) # should now be 79
fillTheBlanks <- function(x, missing="na"){
rle <- rle(as.character(x))
empty <- which(rle$value==missing)
rle$values[empty] <- rle$value[empty-1]
inverse.rle(rle)
}
exp1$primetype <- fillTheBlanks(exp1$primetype)
scale_means <- exp1 %>%
filter(type == "crit") %>%
group_by(target) %>%
summarize(mean = mean(response)) %>%
arrange(mean)
exp1$target <- factor(exp1$target, levels = scale_means$target)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
setwd("~/Documents/GitHub/alts")
d <- read.csv("results/Experiments1-2/results.csv",header = TRUE, stringsAsFactors = FALSE)
d[d$target == "tasty",]$target <- "palatable"
d <- data.frame(lapply(d, function(x) {
gsub('"', '', x)
}))
d <- data.frame(lapply(d, function(x) {
gsub('\\\\', '', x)
}))
exp1 <- d %>%
filter(Answer.list %in% c("list1_str", "list2_str"))
length(unique(exp1$workerid)) #should be 93
unique(exp1$language) # no one in exp1 needs to be excluded by virtue of native lang.
exp1$correct <- 0
exp1[exp1$id %in% c("high_right1","high_right2","high_right3"),]$correct <- "high"
exp1[exp1$id %in% c("low_right1","low_right2","low_right3"),]$correct <- "low"
exp1$response <- as.numeric(exp1$response)
d_excl_exp1 <- exp1 %>%
group_by(workerid, id, correct) %>%
summarize(response) %>%
filter((correct == "high" && response < 50) || (correct == "low" && response > 50)) %>%
group_by(workerid) %>%
summarize(n_mistakes = n()) %>%
filter(n_mistakes > 1)
exp1 <- exp1 %>%
filter(!(workerid %in% d_excl_exp1$workerid)) %>%
filter(type %in% c("prime","crit"))
length(unique(exp1$workerid)) # should now be 79
fillTheBlanks <- function(x, missing="na"){
rle <- rle(as.character(x))
empty <- which(rle$value==missing)
rle$values[empty] <- rle$value[empty-1]
inverse.rle(rle)
}
exp1$primetype <- fillTheBlanks(exp1$primetype)
scale_means <- exp1 %>%
filter(type == "crit") %>%
group_by(target) %>%
summarize(mean = mean(response)) %>%
arrange(mean)
m_exp1 <- lmer(response ~ primetype * target + (primetype|workerid), data = exp1 %>% filter(type == "crit"))
summary(m_exp1)
View(exp1)
myCenter= function(x) {
if (is.numeric(x)) { return(x - mean(x, na.rm=T)) }
if (is.factor(x)) {
x= as.numeric(x)
return(x - mean(x, na.rm=T))
}
if (is.data.frame(x) || is.matrix(x)) {
m= matrix(nrow=nrow(x), ncol=ncol(x))
colnames(m)= paste("c", colnames(x), sep="")
for (i in 1:ncol(x)) {
m[,i]= myCenter(x[,i])
}
return(as.data.frame(m))
}
}
exp1$primetype_centered <- myCenter(factor(exp1$primetype))
contrasts(exp1$primetype)
contrasts(factor(exp1$primetype))
exp1_rl <- exp1 %>%
mutate(target = relevel(target, "some"))
levels(exp1_r1$target)
levels(exp1_rl$target)
m_exp1_c <- lmer(response ~ primetype_centered * target + (primetype_centered|workerid), data = exp1 %>% filter(type == "crit"))
summary(m_exp1_c)
m_exp1_c <- lmer(response ~ primetype_centered * target + (primetype_centered|workerid), data = exp1_rl %>% filter(type == "crit"))
summary(m_exp1_c)
setwd("~/Documents/GitHub/alts/results/Experiment3")
rm(list = ls())
full_posteriors <- read.csv("posteriors_fulldataset.csv")
posteriors_control <- read.csv("posteriors_control.csv")
posteriors_target <- read.csv("posteriors_target.csv")
posteriors_nottarget <- read.csv("posteriors_nottarget.csv")
setwd("~/Documents/GitHub/alts/results/Experiment3/posteriors")
full_posteriors <- read.csv("posteriors_fulldataset.csv")
posteriors_control <- read.csv("posteriors_control.csv")
posteriors_target <- read.csv("posteriors_target.csv")
posteriors_nottarget <- read.csv("posteriors_nottarget.csv")
posteriors_symmetric <- read.csv("posteriors_symmetric.csv")
graph_control <- posteriors_control %>%
#select(cost_istarget,cost_looksliketarget,cost_nottarget) %>%
gather(key = "parameter", value = "cost")
ggplot(graph_control, aes(cost, fill = parameter)) + geom_density(alpha = 0.2) +
labs(x = "Inferred value", y = "Density") #  +
graph_control <- posteriors_control %>%
select(cost_istarget,cost_looksliketarget,cost_nottarget,cost_iscompetitor,cost_notcompetitor,cost_lookslikecompetitor) %>%
gather(key = "parameter", value = "cost")
ggplot(graph_control, aes(cost, fill = parameter)) + geom_density(alpha = 0.2) +
labs(x = "Inferred value", y = "Density") #  +
