install.packages("tidyverse")
names(knitr::knit_engines$get())
install.pandoc()
install.packages("installr")
install.packages("brms")
setwd("~/Documents/GitHub/symm_qp/results/pipeline_pilot_11122018")
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
d <- read.csv("results.csv")
library(tidyverse)
library(ordinal)
library(bootstrap)
library(rwebppl)
library(jsonlite)
to_exclude <- d %>%
group_by(workerid, type, selection) %>%
filter((type == "left" && selection == "right") || (type == "right" && selection  == "left")) %>%
group_by(workerid) %>%
summarize(n_mistakes = n()) %>%
filter(n_mistakes > 0)
d <- d %>%
filter(!(workerid %in% to_exclude$workerid))
sel_counts <- d %>%
# ONLY INTERESTED IN "LOOKS LIKE" TRIALS...
filter(type == "looks like") %>%
# ... THAT THE CONDITIONS SHARE IN COMMON
filter(id %in% (d %>% filter(type == "looks like" & condition == "symmetric"))$id) %>%
group_by(workerid,condition) %>%
summarize(n = n(), ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
pcompetitor = ncompetitor / (ncompetitor + ntarget))
# still have to exclude people...
d_noprompt <- read.csv("results_noprompt.csv")
noprompt_to_exclude <- d %>%
group_by(workerid, type, selection) %>%
filter((type == "left" && selection == "right") || (type == "right" && selection  == "left")) %>%
group_by(workerid) %>%
summarize(n_mistakes = n()) %>%
filter(n_mistakes > 0)
d_noprompt <- d_noprompt %>%
filter(!(workerid %in% noprompt_to_exclude$workerid))
d_noprompt <- d_noprompt %>%
# change for next run: we need type = {control, critical}
filter(type == "looks like") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
competitor_prior = ncompetitor / (ncompetitor + ntarget))
d_naming <- read.csv("results_naming.csv")
d_naming <- d_naming %>%
group_by(id) %>%
summarize(nknowtarget = sum(type == "target" & know == "True"),
nknowcompetitor = sum(type == "competitor" & know == "True"),
target_nameability = nknowtarget / sum(type == "target"),
competitor_nameability = nknowcompetitor / sum(type == "competitor"))
symmetric_byitem <- d %>%
filter(condition == "symmetric" & kind == "critical" & type == "looks like") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
symmetric_byitem <- merge(symmetric_byitem, d_naming, by = "id")
symmetric_byitem <- merge(symmetric_byitem, d_noprompt, by = "id")
symmetric_byitem <- symmetric_byitem %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
View(symmetric_byitem)
symmetric_byitem_json <- toJSON(symmetric_byitem)
bda <- read_file("bda.txt")
symmetric_byitem_json <- toJSON(symmetric_byitem)
symmetric_predictions <- webppl(paste("var itemData = ", symmetric_byitem_json, "\n", bda))
symmetric_byitem <- merge(symmetric_byitem, symmetric_predictions, by = "id")
ggplot(symmetric_byitem, aes(x=observation, y=prediction)) + geom_point()
View(symmetric_byitem)
ggplot(symmetric_byitem, aes(x=observed_competitor, y=prediction)) + geom_point()
with(symmetric_byitem, cor(observed_competitor,prediction))
View(symmetric_byitem)
ggplot(symmetric_byitem, aes(x=prediction, y=observed_competitor)) + geom_point()
with(symmetric_byitem, cor(prediction,observed_competitor))
bda <- read_file("bda.txt")
symmetric_byitem_json <- toJSON(symmetric_byitem)
symmetric_predictions <- webppl(paste("var itemData = ", symmetric_byitem_json, "\n", bda))
bda <- read_file("bda.txt")
symmetric_byitem_json <- toJSON(symmetric_byitem)
symmetric_predictions <- webppl(paste("var itemData = ", symmetric_byitem_json, "\n", bda))
bda <- read_file("bda.txt")
symmetric_byitem_json <- toJSON(symmetric_byitem)
symmetric_predictions <- webppl(paste("var itemData = ", symmetric_byitem_json, "\n", bda))
symmetric_byitem <- merge(symmetric_byitem, symmetric_predictions, by = "id")
View(symmetric_predictions)
symmetric_predictions["predictions",]
symmetric_predictions["predictions"]
symmetric_bda <- webppl(paste("var itemData = ", symmetric_byitem_json, "\n", bda))
rm(symmetric_predictions)
symmetric_predictions <- symmetric_bda["predictions"]
View(symmetric_predictions)
View(symmetric_bda)
View(symmetric_byitem)
View(symmetric_predictions)
rm(symmetric_predictions)
symmetric_bda["predictions"]
symmetric_predictions <- symmetric_bda$predictions
View(symmetric_predictions)
symmetric_byitem <- merge(symmetric_byitem, symmetric_predictions, by = "id")
ggplot(symmetric_byitem, aes(x=prediction, y=observed_competitor)) + geom_point()
View(symmetric_byitem)
rm(symmetric_byitem)
symmetric_byitem <- d %>%
filter(condition == "symmetric" & kind == "critical" & type == "looks like") %>%
group_by(id) %>%
summarize(ntarget = sum(selection == "target"),
ncompetitor = sum(selection == "competitor"),
observed_competitor = ncompetitor / (ncompetitor + ntarget))
symmetric_byitem <- merge(symmetric_byitem, d_naming, by = "id")
symmetric_byitem <- merge(symmetric_byitem, d_noprompt, by = "id")
symmetric_byitem <- symmetric_byitem %>%
select(id,observed_competitor,competitor_prior,target_nameability,competitor_nameability)
symmetric_byitem <- merge(symmetric_byitem, symmetric_predictions, by = "id")
ggplot(symmetric_byitem, aes(x=prediction, y=observed_competitor)) + geom_point()
with(symmetric_byitem, cor(prediction,observed_competitor))
symmetric_posteriors <- symmetric_bda$posteriors
View(symmetric_posteriors)
levels(symmetric_posteriors$probs)
symmetric_posteriors$probs
hist((symmetric_posteriors$support)$alpha)
hist((symmetric_posteriors$support)$cost_looksliketarget)
hist((symmetric_posteriors$support)$cost_lookslikecompetitor)
symmetric_posteriors <- (symmetric_bda$posteriors)$support
View(symmetric_posteriors)
hist(symmetric_posteriors$alpha)
