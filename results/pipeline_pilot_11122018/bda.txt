// var itemData = [
//  {id: "baseball", competitor_prior: 0.5, observed_competitor: 0.55, target_nameability : 0.7, competitor_nameability : 0.3},
//  {id: "cake", competitor_prior: 0.55, observed_competitor: 0.65, target_nameability : 0.9, competitor_nameability : 0.9},
// ]
 
var statePrior = function(c) {
  return flip(c) ? "competitor" : "target"
};

var utterances = ["istarget", "looksliketarget","nottarget","iscompetitor","notcompetitor","lookslikecompetitor"];

var model = function() {
 
 // could change
 var cost_looksliketarget = uniformDrift({a: 0, b: 5, w: 1})
 var cost_lookslikecompetitor= uniformDrift({a: 0, b: 5, w: 1})
 var cost_istarget = uniformDrift({a: 0, b: 5, w: 1})
 var cost_nottarget = uniformDrift({a: 0, b: 5, w: 1})
 var cost_iscompetitor = uniformDrift({a: 0, b: 5, w: 1})
 var cost_notcompetitor = uniformDrift({a: 0, b: 5, w: 1})

// simplifying assumption: cost of "It's a [target]" is directly proportional to 
// cost of form "It's an X", inversely proportional to nameability of target
 
var cost = function (item) {
  return {
  "istarget": cost_istarget / item.target_nameability,
  "nottarget" : cost_nottarget / item.target_nameability,
  "looksliketarget": cost_looksliketarget / item.target_nameability,
  "iscompetitor" : cost_iscompetitor / item.competitor_nameability,
  "notcompetitor" : cost_notcompetitor / item.competitor_nameability,
  "lookslikecompetitor": cost_lookslikecompetitor / item.competitor_nameability,
};
} 

var utterancePrior = function(item) {
  var uttProbs = map(function(u) {return Math.exp(-cost(item)[u]) }, utterances);
  return categorical(uttProbs, utterances);
};

var literalMeanings = {
  looksliketarget: function(state) { return state == "target" || state == "competitor"; },
  lookslikecompetitor: function(state) { return state == "target" || state == "competitor"; },
  istarget: function(state) { return state == "target"; },
  nottarget: function(state) {return state == "competitor";  },
  iscompetitor : function(state) {return state == "competitor";  },
  notcompetitor : function(state) { return state == "target"; },
};

var literalListener = cache(function(utt) {
  return Infer({model: function(){
    var state = statePrior()
    var meaning = literalMeanings[utt]
    condition(meaning(state))
    return state
  }})
});

// set speaker optimality
var alpha = uniformDrift({a: 0, b: 5, w: 1})

// pragmatic speaker
var speaker = cache(function(state,item) {
  return Infer({model: function(){
    var utt = utterancePrior(item)
    factor(alpha * literalListener(utt).score(state))
    return utt
  }})
});

// pragmatic listener
  
var f = function(d) {
  var posts = Infer({model: function(){
    var state = statePrior(d.competitor_prior)
    observe(speaker(state,d),"looksliketarget")
    return state
  }})

var predicted_competitor = Math.abs(Math.exp(posts.score(["competitor"])))

observe(Gaussian({mu: predicted_competitor, sigma: 0.1}), d.observed_competitor)
}

map(f, itemData)

return {
  cost_istarget: cost_istarget,
  cost_looksliketarget: cost_looksliketarget,
  cost_nottarget: cost_nottarget,
  cost_iscompetitor: cost_iscompetitor,
  cost_notcompetitor: cost_notcompetitor,
  cost_lookslikecompetitor: cost_lookslikecompetitor,
  alpha : alpha,
  };
  
}

var inferenceSettings = {
  model: model, method:'MCMC',
  // callbacks: [editor.MCMCProgress()],
  verbose: true,
  samples: 2000,
  lag: 10,
  burn: 20000
};

var output = Infer(inferenceSettings)

var maxap = (output.MAP().val)

var model_posterior = function(item) {

 var cost_istarget = maxap.cost_istarget
 var cost_looksliketarget = maxap.cost_looksliketarget
 var cost_nottarget = maxap.cost_nottarget
 var cost_iscompetitor = maxap.cost_iscompetitor
 var cost_notcompetitor = maxap.cost_notcompetitor
 var cost_lookslikecompetitor = maxap.cost_lookslikecompetitor
 
var cost = {
  "istarget": cost_istarget / item.target_nameability,
  "nottarget" : cost_nottarget / item.target_nameability,
  "looksliketarget": cost_looksliketarget / item.target_nameability,
  "iscompetitor" : cost_iscompetitor / item.competitor_nameability,
  "notcompetitor" : cost_notcompetitor / item.competitor_nameability,
  "lookslikecompetitor": cost_lookslikecompetitor / item.competitor_nameability,
};

var utterancePrior = function() {
  var uttProbs = map(function(u) {return Math.exp(-cost[u]) }, utterances);
  return categorical(uttProbs, utterances);
};

var literalMeanings = {
  looksliketarget: function(state) { return state == "target" || state == "competitor"; },
  lookslikecompetitor: function(state) { return state == "target" || state == "competitor"; },
  istarget: function(state) { return state == "target"; },
  nottarget: function(state) {return state == "competitor";  },
  iscompetitor : function(state) {return state == "competitor";  },
  notcompetitor : function(state) { return state == "target"; },
};

var literalListener = cache(function(utt) {
  return Infer({model: function(){
    var state = statePrior()
    var meaning = literalMeanings[utt]
    condition(meaning(state))
    return state
  }})
});

// set speaker optimality
var alpha = maxap.alpha

// pragmatic speaker
var speaker = cache(function(state,item) {
  return Infer({model: function(){
    var utt = utterancePrior(item)
    factor(alpha * literalListener(utt).score(state))
    return utt
  }})
});

// pragmatic listener
  
var posts = Infer({model: function(){
    var state = statePrior(item.competitor_prior)
    observe(speaker(state,item),"looksliketarget")
    return state
} });

return posts
                   
}

var predictions = map(function(i) {return {id: i.id, prediction: Math.exp(model_posterior(i).score("competitor"))} }, itemData)   

var out = {predictions: predictions, posteriors: output}

out